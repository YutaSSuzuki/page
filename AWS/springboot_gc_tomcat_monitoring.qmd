---
title: "Spring Boot GC・Tomcatスレッド数監視（StatsD + CloudWatch）"
format: html
editor: visual
---

## ✅ 構成概要

```
Spring Boot (Micrometer StatsD)  
   ↓ UDP  
CloudWatch Agent (StatsD Listener)  
   ↓  
Amazon CloudWatch（メトリクス & ダッシュボード）
```

---

## 🧩 事前要件

- Amazon EC2 上に Spring Boot アプリを構築済み
- CloudWatch Agent インストール済み
- EC2 に IAM ロール `AmazonCloudWatchAgentServerPolicy` が付与されていること

必要なコマンドのインストール
``` bash
#java
sudo yum install -y java-1.8.0-openjdk
#unzip
sudo yum install -y unzip
#ss
sudo yum install -y iproute

#cloudwatch agent
sudo dnf install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
sudo systemctl enable amazon-ssm-agent

```


---

## 🪛 1. Spring Boot アプリに Micrometer + StatsD を導入

### pom.xml に依存追加

````xml
<dependency>
  <groupId>org.springframework.boot</groupId>
  <artifactId>spring-boot-starter-actuator</artifactId>
</dependency>
<dependency>
  <groupId>io.micrometer</groupId>
  <artifactId>micrometer-registry-statsd</artifactId>
</dependency>
````

### application.properties の設定

````properties
management.metrics.export.statsd.enabled=true
management.metrics.export.statsd.host=localhost
management.metrics.export.statsd.port=8125
management.metrics.enable.jvm=true
management.metrics.enable.tomcat=true
logging.level.io.micrometer.statsd=INFO
````

---

## 🧠 2. 自動収集されるメトリクスの例

### GC 関連
- `jvm.gc.pause`
- `jvm.gc.max.data.size`
- `jvm.memory.used`
- `jvm.memory.max`

### Tomcat スレッド関連
- `tomcat.threads.config.max`
- `tomcat.threads.current`
- `tomcat.threads.busy`

---

## 📦 3. CloudWatch Agent の設定

### `/opt/aws/amazon-cloudwatch-agent/bin/config.json` 設定例

````json
{
  "metrics": {
    "metrics_collected": {
      "statsd": {
        "service_address": ":8125",
        "metrics_collection_interval": 10,
        "metrics_aggregation_interval": 60
      }
    }
  }
}
````

### 設定適用コマンド

````bash
sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
  -a fetch-config \
  -m ec2 \
  -c file:/opt/aws/amazon-cloudwatch-agent/bin/config.json \
  -s
````

---

## 🔍 4. CloudWatch メトリクス確認

CloudWatch コンソール → メトリクス → 名前空間：`StatsD`  
対象メトリクス例：

| タイトル | メトリクス名 |
|----------|--------------|
| GC Pause | `jvm.gc.pause` |
| Max Data Size | `jvm.gc.max.data.size` |
| Current Threads | `tomcat.threads.current` |
| Busy Threads | `tomcat.threads.busy` |

---

## 📊 5. CloudWatch Dashboards で可視化（例）

```
metric1 / 1000  # GC Pauseを秒に変換
```

---

## ✅ 完了チェックリスト

- [x] Spring Boot 側に Micrometer StatsD 導入済み  
- [x] GC・Tomcat スレッドメトリクスが出力されている（`nc -u -l 8125` などで確認）  
- [x] CloudWatch Agent が起動・8125リッスン中  
- [x] CloudWatch ダッシュボードで可視化できた